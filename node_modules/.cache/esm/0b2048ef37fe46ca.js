let idArg,mutationType,stringArg,intArg;_37f‍.x([["Mutation",()=>Mutation]]);_37f‍.w("nexus",[["idArg",["idArg"],function(v){idArg=v}],["mutationType",["mutationType"],function(v){mutationType=v}],["stringArg",["stringArg"],function(v){stringArg=v}],["intArg",["intArg"],function(v){intArg=v}]]);

       const Mutation = mutationType({
  name: 'Mutation',
  definition(t) {
    t.crud.deleteOneStats()

    t.field('createStats', {
      type: 'Stats',
      args: {
        KD: stringArg({ nullable: false }),
        GamerTag: stringArg({ nullable: false }),
        Platform: stringArg({ nullable: false }),
      },
      resolve: (parent, { KD, GamerTag, Platform }, ctx) => {
        return ctx.prisma.Stats.create({
          data: {
            KD,
            GamerTag,
            Platform,
          },
        })
      },
    })

    t.field('updateStats', {
      type: 'Stats',
      args: {
        id: idArg(),
        KD: stringArg(),
        GamerTag: stringArg(),
        Platform: stringArg(),
      },
      resolve: (parent, { id, KD, GamerTag, Platform }, ctx) => {
        return ctx.prisma.Stats.update({
          where: {
            id,
          },
          data: {
            KD,
            GamerTag,
            Platform,
          },
        })
      },
    })
  },
})
