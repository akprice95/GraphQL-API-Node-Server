import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
} from './runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Query Engine version: latest
 */

/**
 * Utility Types
 */

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;
export declare type MergeTruthyValues<R extends object, S extends object> = {
  [key in keyof S | keyof R]: key extends false ? never : key extends keyof S ? S[key] extends false ? never : S[key] : key extends keyof R ? R[key] : never;
};
export declare type CleanupNever<T> = {
  [key in keyof T]: T[key] extends never ? never : key;
}[keyof T];
/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string, collectTimestamps?: any): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/


export type Datasources = {
  db?: string
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  datasources?: Datasources

  /**
   * @default "pretty"
   */
  errorFormat?: ErrorFormat

  log?: Array<LogLevel | LogDefinition>

  /**
   * You probably don't want to use this. `__internal` is used by internal tooling.
   */
  __internal?: {
    debug?: boolean
    hooks?: Hooks
    engine?: {
      cwd?: string
      binaryPath?: string
    }
    measurePerformance?: boolean
  }
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends Array<LogLevel | LogDefinition>> = GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]>

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Stats
 * const stats = await prisma.stats.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
 */
export declare class PrismaClient<T extends PrismaClientOptions = {}, U = keyof T extends 'log' ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Stats
   * const stats = await prisma.stats.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
   */
  constructor(optionsArg?: T);
  on<V extends U>(eventType: V, callback: V extends never ? never : (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  connect(): Promise<void>;
  /**
   * @private
   */
  private runDisconnect;
  /**
   * Disconnect from the database
   */
  disconnect(): Promise<any>;
  /**
   * Makes a raw query
   * @example
   * ```
   * // Fetch all entries from the `User` table
   * const result = await prisma.raw`SELECT * FROM User;`
   * // Or
   * const result = await prisma.raw('SELECT * FROM User;')
  * ```
  * 
  * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  raw<T = any>(query: string | TemplateStringsArray): Promise<T>;

  /**
   * `prisma.stats`: Exposes CRUD operations for the **stats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stats
    * const stats = await prisma.stats.findMany()
    * ```
    */
  get stats(): statsDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const OrderByArg: {
  asc: 'asc',
  desc: 'desc'
};

export declare type OrderByArg = (typeof OrderByArg)[keyof typeof OrderByArg]



/**
 * Model stats
 */

export type stats = {
  id: string
  createdAt: Date
  updatedAt: Date
  name: string
  KD: number
  GamerTag: string
  Platform: string
}

export type statsScalars = 'id' | 'createdAt' | 'updatedAt' | 'name' | 'KD' | 'GamerTag' | 'Platform'
  

export type statsSelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  name?: boolean
  KD?: boolean
  GamerTag?: boolean
  Platform?: boolean
}

export type statsInclude = {

}

type statsDefault = {
  id: true
  createdAt: true
  updatedAt: true
  name: true
  KD: true
  GamerTag: true
  Platform: true
}


export type statsGetSelectPayload<S extends boolean | statsSelect> = S extends true
  ? stats
  : S extends statsSelect
  ? {
      [P in CleanupNever<MergeTruthyValues<{}, S>>]: P extends statsScalars
        ? stats[P]
        : never
    }
   : never

export type statsGetIncludePayload<S extends boolean | statsInclude> = S extends true
  ? stats
  : S extends statsInclude
  ? {
      [P in CleanupNever<MergeTruthyValues<statsDefault, S>>]: P extends statsScalars
        ? stats[P]
        : never
    }
   : never

export interface statsDelegate {
  /**
   * Find zero or one Stats.
   * @param {FindOnestatsArgs} args - Arguments to find a Stats
   * @example
   * // Get one Stats
   * const stats = await prisma.stats.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnestatsArgs>(
    args: Subset<T, FindOnestatsArgs>
  ): T extends FindOnestatsArgsRequired ? 'Please either choose `select` or `include`' : T extends FindOnestatsSelectArgs ? Promise<statsGetSelectPayload<ExtractFindOnestatsSelectArgs<T>> | null>
  : T extends FindOnestatsIncludeArgs ? Promise<statsGetIncludePayload<ExtractFindOnestatsIncludeArgs<T>> | null> : statsClient<stats | null>
  /**
   * Find zero or more Stats.
   * @param {FindManystatsArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Stats
   * const stats = await prisma.stats.findMany()
   * 
   * // Get first 10 Stats
   * const stats = await prisma.stats.findMany({ first: 10 })
   * 
   * // Only select the `id`
   * const statsWithIdOnly = await prisma.stats.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManystatsArgs>(
    args?: Subset<T, FindManystatsArgs>
  ): T extends FindManystatsArgsRequired ? 'Please either choose `select` or `include`' : T extends FindManystatsSelectArgs
  ? Promise<Array<statsGetSelectPayload<ExtractFindManystatsSelectArgs<T>>>> : T extends FindManystatsIncludeArgs
  ? Promise<Array<statsGetIncludePayload<ExtractFindManystatsIncludeArgs<T>>>> : Promise<Array<stats>>
  /**
   * Create a Stats.
   * @param {statsCreateArgs} args - Arguments to create a Stats.
   * @example
   * // Create one Stats
   * const user = await prisma.stats.create({
   *   data: {
   *     // ... data to create a Stats
   *   }
   * })
   * 
  **/
  create<T extends statsCreateArgs>(
    args: Subset<T, statsCreateArgs>
  ): T extends statsCreateArgsRequired ? 'Please either choose `select` or `include`' : T extends statsSelectCreateArgs ? Promise<statsGetSelectPayload<ExtractstatsSelectCreateArgs<T>>>
  : T extends statsIncludeCreateArgs ? Promise<statsGetIncludePayload<ExtractstatsIncludeCreateArgs<T>>> : statsClient<stats>
  /**
   * Delete a Stats.
   * @param {statsDeleteArgs} args - Arguments to delete one Stats.
   * @example
   * // Delete one Stats
   * const user = await prisma.stats.delete({
   *   where: {
   *     // ... filter to delete one Stats
   *   }
   * })
   * 
  **/
  delete<T extends statsDeleteArgs>(
    args: Subset<T, statsDeleteArgs>
  ): T extends statsDeleteArgsRequired ? 'Please either choose `select` or `include`' : T extends statsSelectDeleteArgs ? Promise<statsGetSelectPayload<ExtractstatsSelectDeleteArgs<T>>>
  : T extends statsIncludeDeleteArgs ? Promise<statsGetIncludePayload<ExtractstatsIncludeDeleteArgs<T>>> : statsClient<stats>
  /**
   * Update one Stats.
   * @param {statsUpdateArgs} args - Arguments to update one Stats.
   * @example
   * // Update one Stats
   * const stats = await prisma.stats.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  update<T extends statsUpdateArgs>(
    args: Subset<T, statsUpdateArgs>
  ): T extends statsUpdateArgsRequired ? 'Please either choose `select` or `include`' : T extends statsSelectUpdateArgs ? Promise<statsGetSelectPayload<ExtractstatsSelectUpdateArgs<T>>>
  : T extends statsIncludeUpdateArgs ? Promise<statsGetIncludePayload<ExtractstatsIncludeUpdateArgs<T>>> : statsClient<stats>
  /**
   * Delete zero or more Stats.
   * @param {statsDeleteManyArgs} args - Arguments to filter Stats to delete.
   * @example
   * // Delete a few Stats
   * const { count } = await prisma.stats.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends statsDeleteManyArgs>(
    args: Subset<T, statsDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Stats.
   * @param {statsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Stats
   * const stats = await prisma.stats.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  updateMany<T extends statsUpdateManyArgs>(
    args: Subset<T, statsUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Stats.
   * @param {statsUpsertArgs} args - Arguments to update or create a Stats.
   * @example
   * // Update or create a Stats
   * const stats = await prisma.stats.upsert({
   *   create: {
   *     // ... data to create a Stats
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Stats we want to update
   *   }
   * })
  **/
  upsert<T extends statsUpsertArgs>(
    args: Subset<T, statsUpsertArgs>
  ): T extends statsUpsertArgsRequired ? 'Please either choose `select` or `include`' : T extends statsSelectUpsertArgs ? Promise<statsGetSelectPayload<ExtractstatsSelectUpsertArgs<T>>>
  : T extends statsIncludeUpsertArgs ? Promise<statsGetIncludePayload<ExtractstatsIncludeUpsertArgs<T>>> : statsClient<stats>
  /**
   * 
   */
  count(): Promise<number>
}

export declare class statsClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * stats findOne
 */
export type FindOnestatsArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * Filter, which stats to fetch.
  **/
  where: statsWhereUniqueInput
}

export type FindOnestatsArgsRequired = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * Filter, which stats to fetch.
  **/
  where: statsWhereUniqueInput
}

export type FindOnestatsSelectArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * Filter, which stats to fetch.
  **/
  where: statsWhereUniqueInput
}

export type FindOnestatsSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * Filter, which stats to fetch.
  **/
  where: statsWhereUniqueInput
}

export type FindOnestatsIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * Filter, which stats to fetch.
  **/
  where: statsWhereUniqueInput
}

export type FindOnestatsIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * Filter, which stats to fetch.
  **/
  where: statsWhereUniqueInput
}

export type ExtractFindOnestatsSelectArgs<S extends undefined | boolean | FindOnestatsSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOnestatsSelectArgs
  ? S['select']
  : true

export type ExtractFindOnestatsIncludeArgs<S extends undefined | boolean | FindOnestatsIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOnestatsIncludeArgs
  ? S['include']
  : true



/**
 * stats findMany
 */
export type FindManystatsArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * Filter, which stats to fetch.
  **/
  where?: statsWhereInput | null
  /**
   * Determine the order of the stats to fetch.
  **/
  orderBy?: statsOrderByInput | null
  /**
   * Skip the first `n` stats.
  **/
  skip?: number | null
  /**
   * Get all stats that come after the stats you provide with the current order.
  **/
  after?: statsWhereUniqueInput | null
  /**
   * Get all stats that come before the stats you provide with the current order.
  **/
  before?: statsWhereUniqueInput | null
  /**
   * Get the first `n` stats.
  **/
  first?: number | null
  /**
   * Get the last `n` stats.
  **/
  last?: number | null
}

export type FindManystatsArgsRequired = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * Filter, which stats to fetch.
  **/
  where?: statsWhereInput | null
  /**
   * Determine the order of the stats to fetch.
  **/
  orderBy?: statsOrderByInput | null
  /**
   * Skip the first `n` stats.
  **/
  skip?: number | null
  /**
   * Get all stats that come after the stats you provide with the current order.
  **/
  after?: statsWhereUniqueInput | null
  /**
   * Get all stats that come before the stats you provide with the current order.
  **/
  before?: statsWhereUniqueInput | null
  /**
   * Get the first `n` stats.
  **/
  first?: number | null
  /**
   * Get the last `n` stats.
  **/
  last?: number | null
}

export type FindManystatsSelectArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * Filter, which stats to fetch.
  **/
  where?: statsWhereInput | null
  /**
   * Determine the order of the stats to fetch.
  **/
  orderBy?: statsOrderByInput | null
  /**
   * Skip the first `n` stats.
  **/
  skip?: number | null
  /**
   * Get all stats that come after the stats you provide with the current order.
  **/
  after?: statsWhereUniqueInput | null
  /**
   * Get all stats that come before the stats you provide with the current order.
  **/
  before?: statsWhereUniqueInput | null
  /**
   * Get the first `n` stats.
  **/
  first?: number | null
  /**
   * Get the last `n` stats.
  **/
  last?: number | null
}

export type FindManystatsSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * Filter, which stats to fetch.
  **/
  where?: statsWhereInput | null
  /**
   * Determine the order of the stats to fetch.
  **/
  orderBy?: statsOrderByInput | null
  /**
   * Skip the first `n` stats.
  **/
  skip?: number | null
  /**
   * Get all stats that come after the stats you provide with the current order.
  **/
  after?: statsWhereUniqueInput | null
  /**
   * Get all stats that come before the stats you provide with the current order.
  **/
  before?: statsWhereUniqueInput | null
  /**
   * Get the first `n` stats.
  **/
  first?: number | null
  /**
   * Get the last `n` stats.
  **/
  last?: number | null
}

export type FindManystatsIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * Filter, which stats to fetch.
  **/
  where?: statsWhereInput | null
  /**
   * Determine the order of the stats to fetch.
  **/
  orderBy?: statsOrderByInput | null
  /**
   * Skip the first `n` stats.
  **/
  skip?: number | null
  /**
   * Get all stats that come after the stats you provide with the current order.
  **/
  after?: statsWhereUniqueInput | null
  /**
   * Get all stats that come before the stats you provide with the current order.
  **/
  before?: statsWhereUniqueInput | null
  /**
   * Get the first `n` stats.
  **/
  first?: number | null
  /**
   * Get the last `n` stats.
  **/
  last?: number | null
}

export type FindManystatsIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * Filter, which stats to fetch.
  **/
  where?: statsWhereInput | null
  /**
   * Determine the order of the stats to fetch.
  **/
  orderBy?: statsOrderByInput | null
  /**
   * Skip the first `n` stats.
  **/
  skip?: number | null
  /**
   * Get all stats that come after the stats you provide with the current order.
  **/
  after?: statsWhereUniqueInput | null
  /**
   * Get all stats that come before the stats you provide with the current order.
  **/
  before?: statsWhereUniqueInput | null
  /**
   * Get the first `n` stats.
  **/
  first?: number | null
  /**
   * Get the last `n` stats.
  **/
  last?: number | null
}

export type ExtractFindManystatsSelectArgs<S extends undefined | boolean | FindManystatsSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManystatsSelectArgs
  ? S['select']
  : true

export type ExtractFindManystatsIncludeArgs<S extends undefined | boolean | FindManystatsIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManystatsIncludeArgs
  ? S['include']
  : true



/**
 * stats create
 */
export type statsCreateArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * The data needed to create a stats.
  **/
  data: statsCreateInput
}

export type statsCreateArgsRequired = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * The data needed to create a stats.
  **/
  data: statsCreateInput
}

export type statsSelectCreateArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * The data needed to create a stats.
  **/
  data: statsCreateInput
}

export type statsSelectCreateArgsOptional = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * The data needed to create a stats.
  **/
  data: statsCreateInput
}

export type statsIncludeCreateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * The data needed to create a stats.
  **/
  data: statsCreateInput
}

export type statsIncludeCreateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * The data needed to create a stats.
  **/
  data: statsCreateInput
}

export type ExtractstatsSelectCreateArgs<S extends undefined | boolean | statsSelectCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends statsSelectCreateArgs
  ? S['select']
  : true

export type ExtractstatsIncludeCreateArgs<S extends undefined | boolean | statsIncludeCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends statsIncludeCreateArgs
  ? S['include']
  : true



/**
 * stats update
 */
export type statsUpdateArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * The data needed to update a stats.
  **/
  data: statsUpdateInput
  /**
   * Choose, which stats to update.
  **/
  where: statsWhereUniqueInput
}

export type statsUpdateArgsRequired = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * The data needed to update a stats.
  **/
  data: statsUpdateInput
  /**
   * Choose, which stats to update.
  **/
  where: statsWhereUniqueInput
}

export type statsSelectUpdateArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * The data needed to update a stats.
  **/
  data: statsUpdateInput
  /**
   * Choose, which stats to update.
  **/
  where: statsWhereUniqueInput
}

export type statsSelectUpdateArgsOptional = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * The data needed to update a stats.
  **/
  data: statsUpdateInput
  /**
   * Choose, which stats to update.
  **/
  where: statsWhereUniqueInput
}

export type statsIncludeUpdateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * The data needed to update a stats.
  **/
  data: statsUpdateInput
  /**
   * Choose, which stats to update.
  **/
  where: statsWhereUniqueInput
}

export type statsIncludeUpdateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * The data needed to update a stats.
  **/
  data: statsUpdateInput
  /**
   * Choose, which stats to update.
  **/
  where: statsWhereUniqueInput
}

export type ExtractstatsSelectUpdateArgs<S extends undefined | boolean | statsSelectUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends statsSelectUpdateArgs
  ? S['select']
  : true

export type ExtractstatsIncludeUpdateArgs<S extends undefined | boolean | statsIncludeUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends statsIncludeUpdateArgs
  ? S['include']
  : true



/**
 * stats updateMany
 */
export type statsUpdateManyArgs = {
  data: statsUpdateManyMutationInput
  where?: statsWhereInput | null
}


/**
 * stats upsert
 */
export type statsUpsertArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * The filter to search for the stats to update in case it exists.
  **/
  where: statsWhereUniqueInput
  /**
   * In case the stats found by the `where` argument doesn't exist, create a new stats with this data.
  **/
  create: statsCreateInput
  /**
   * In case the stats was found with the provided `where` argument, update it with this data.
  **/
  update: statsUpdateInput
}

export type statsUpsertArgsRequired = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * The filter to search for the stats to update in case it exists.
  **/
  where: statsWhereUniqueInput
  /**
   * In case the stats found by the `where` argument doesn't exist, create a new stats with this data.
  **/
  create: statsCreateInput
  /**
   * In case the stats was found with the provided `where` argument, update it with this data.
  **/
  update: statsUpdateInput
}

export type statsSelectUpsertArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * The filter to search for the stats to update in case it exists.
  **/
  where: statsWhereUniqueInput
  /**
   * In case the stats found by the `where` argument doesn't exist, create a new stats with this data.
  **/
  create: statsCreateInput
  /**
   * In case the stats was found with the provided `where` argument, update it with this data.
  **/
  update: statsUpdateInput
}

export type statsSelectUpsertArgsOptional = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * The filter to search for the stats to update in case it exists.
  **/
  where: statsWhereUniqueInput
  /**
   * In case the stats found by the `where` argument doesn't exist, create a new stats with this data.
  **/
  create: statsCreateInput
  /**
   * In case the stats was found with the provided `where` argument, update it with this data.
  **/
  update: statsUpdateInput
}

export type statsIncludeUpsertArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * The filter to search for the stats to update in case it exists.
  **/
  where: statsWhereUniqueInput
  /**
   * In case the stats found by the `where` argument doesn't exist, create a new stats with this data.
  **/
  create: statsCreateInput
  /**
   * In case the stats was found with the provided `where` argument, update it with this data.
  **/
  update: statsUpdateInput
}

export type statsIncludeUpsertArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * The filter to search for the stats to update in case it exists.
  **/
  where: statsWhereUniqueInput
  /**
   * In case the stats found by the `where` argument doesn't exist, create a new stats with this data.
  **/
  create: statsCreateInput
  /**
   * In case the stats was found with the provided `where` argument, update it with this data.
  **/
  update: statsUpdateInput
}

export type ExtractstatsSelectUpsertArgs<S extends undefined | boolean | statsSelectUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends statsSelectUpsertArgs
  ? S['select']
  : true

export type ExtractstatsIncludeUpsertArgs<S extends undefined | boolean | statsIncludeUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends statsIncludeUpsertArgs
  ? S['include']
  : true



/**
 * stats delete
 */
export type statsDeleteArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * Filter which stats to delete.
  **/
  where: statsWhereUniqueInput
}

export type statsDeleteArgsRequired = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * Filter which stats to delete.
  **/
  where: statsWhereUniqueInput
}

export type statsSelectDeleteArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * Filter which stats to delete.
  **/
  where: statsWhereUniqueInput
}

export type statsSelectDeleteArgsOptional = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * Filter which stats to delete.
  **/
  where: statsWhereUniqueInput
}

export type statsIncludeDeleteArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
  /**
   * Filter which stats to delete.
  **/
  where: statsWhereUniqueInput
}

export type statsIncludeDeleteArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
  /**
   * Filter which stats to delete.
  **/
  where: statsWhereUniqueInput
}

export type ExtractstatsSelectDeleteArgs<S extends undefined | boolean | statsSelectDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends statsSelectDeleteArgs
  ? S['select']
  : true

export type ExtractstatsIncludeDeleteArgs<S extends undefined | boolean | statsIncludeDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends statsIncludeDeleteArgs
  ? S['include']
  : true



/**
 * stats deleteMany
 */
export type statsDeleteManyArgs = {
  where?: statsWhereInput | null
}


/**
 * stats without action
 */
export type statsArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
}

export type statsArgsRequired = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
}

export type statsSelectArgs = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select: statsSelect
}

export type statsSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the stats
  **/
  select?: statsSelect | null
}

export type statsIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: statsInclude
}

export type statsIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: statsInclude | null
}

export type ExtractstatsSelectArgs<S extends undefined | boolean | statsSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends statsSelectArgs
  ? S['select']
  : true

export type ExtractstatsIncludeArgs<S extends undefined | boolean | statsIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends statsIncludeArgs
  ? S['include']
  : true




/**
 * Deep Input Types
 */


export type statsWhereInput = {
  id?: string | StringFilter | null
  createdAt?: Date | string | DateTimeFilter | null
  updatedAt?: Date | string | DateTimeFilter | null
  name?: string | StringFilter | null
  KD?: number | FloatFilter | null
  GamerTag?: string | StringFilter | null
  Platform?: string | StringFilter | null
  AND?: Enumerable<statsWhereInput> | null
  OR?: Enumerable<statsWhereInput> | null
  NOT?: Enumerable<statsWhereInput> | null
}

export type statsWhereUniqueInput = {
  id?: string | null
}

export type statsCreateInput = {
  id?: string | null
  createdAt?: Date | string | null
  updatedAt?: Date | string | null
  name: string
  KD: number
  GamerTag: string
  Platform: string
}

export type statsUpdateInput = {
  id?: string | null
  createdAt?: Date | string | null
  updatedAt?: Date | string | null
  name?: string | null
  KD?: number | null
  GamerTag?: string | null
  Platform?: string | null
}

export type statsUpdateManyMutationInput = {
  id?: string | null
  createdAt?: Date | string | null
  updatedAt?: Date | string | null
  name?: string | null
  KD?: number | null
  GamerTag?: string | null
  Platform?: string | null
}

export type StringFilter = {
  equals?: string | null
  not?: string | StringFilter | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
}

export type DateTimeFilter = {
  equals?: Date | string | null
  not?: Date | string | DateTimeFilter | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
}

export type FloatFilter = {
  equals?: number | null
  not?: number | FloatFilter | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
}

export type statsOrderByInput = {
  id?: OrderByArg | null
  createdAt?: OrderByArg | null
  updatedAt?: OrderByArg | null
  name?: OrderByArg | null
  KD?: OrderByArg | null
  GamerTag?: OrderByArg | null
  Platform?: OrderByArg | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
