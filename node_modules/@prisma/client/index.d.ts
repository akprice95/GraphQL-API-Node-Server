import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
} from './runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Query Engine version: latest
 */

/**
 * Utility Types
 */

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;
export declare type MergeTruthyValues<R extends object, S extends object> = {
  [key in keyof S | keyof R]: key extends false ? never : key extends keyof S ? S[key] extends false ? never : S[key] : key extends keyof R ? R[key] : never;
};
export declare type CleanupNever<T> = {
  [key in keyof T]: T[key] extends never ? never : key;
}[keyof T];
/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string, collectTimestamps?: any): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/


export type Datasources = {
  db?: string
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  datasources?: Datasources

  /**
   * @default "pretty"
   */
  errorFormat?: ErrorFormat

  log?: Array<LogLevel | LogDefinition>

  /**
   * You probably don't want to use this. `__internal` is used by internal tooling.
   */
  __internal?: {
    debug?: boolean
    hooks?: Hooks
    engine?: {
      cwd?: string
      binaryPath?: string
    }
    measurePerformance?: boolean
  }
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends Array<LogLevel | LogDefinition>> = GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]>

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Courses
 * const courses = await prisma.course.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
 */
export declare class PrismaClient<T extends PrismaClientOptions = {}, U = keyof T extends 'log' ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Courses
   * const courses = await prisma.course.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
   */
  constructor(optionsArg?: T);
  on<V extends U>(eventType: V, callback: V extends never ? never : (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  connect(): Promise<void>;
  /**
   * @private
   */
  private runDisconnect;
  /**
   * Disconnect from the database
   */
  disconnect(): Promise<any>;
  /**
   * Makes a raw query
   * @example
   * ```
   * // Fetch all entries from the `User` table
   * const result = await prisma.raw`SELECT * FROM User;`
   * // Or
   * const result = await prisma.raw('SELECT * FROM User;')
  * ```
  * 
  * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  raw<T = any>(query: string | TemplateStringsArray): Promise<T>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): CourseDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const OrderByArg: {
  asc: 'asc',
  desc: 'desc'
};

export declare type OrderByArg = (typeof OrderByArg)[keyof typeof OrderByArg]



/**
 * Model Course
 */

export type Course = {
  id: string
  createdAt: Date
  updatedAt: Date
  name: string
  KD: string
  GamerTag: string
  Platform: string
}

export type CourseScalars = 'id' | 'createdAt' | 'updatedAt' | 'name' | 'KD' | 'GamerTag' | 'Platform'
  

export type CourseSelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  name?: boolean
  KD?: boolean
  GamerTag?: boolean
  Platform?: boolean
}

export type CourseInclude = {

}

type CourseDefault = {
  id: true
  createdAt: true
  updatedAt: true
  name: true
  KD: true
  GamerTag: true
  Platform: true
}


export type CourseGetSelectPayload<S extends boolean | CourseSelect> = S extends true
  ? Course
  : S extends CourseSelect
  ? {
      [P in CleanupNever<MergeTruthyValues<{}, S>>]: P extends CourseScalars
        ? Course[P]
        : never
    }
   : never

export type CourseGetIncludePayload<S extends boolean | CourseInclude> = S extends true
  ? Course
  : S extends CourseInclude
  ? {
      [P in CleanupNever<MergeTruthyValues<CourseDefault, S>>]: P extends CourseScalars
        ? Course[P]
        : never
    }
   : never

export interface CourseDelegate {
  /**
   * Find zero or one Course.
   * @param {FindOneCourseArgs} args - Arguments to find a Course
   * @example
   * // Get one Course
   * const course = await prisma.course.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneCourseArgs>(
    args: Subset<T, FindOneCourseArgs>
  ): T extends FindOneCourseArgsRequired ? 'Please either choose `select` or `include`' : T extends FindOneCourseSelectArgs ? Promise<CourseGetSelectPayload<ExtractFindOneCourseSelectArgs<T>> | null>
  : T extends FindOneCourseIncludeArgs ? Promise<CourseGetIncludePayload<ExtractFindOneCourseIncludeArgs<T>> | null> : CourseClient<Course | null>
  /**
   * Find zero or more Courses.
   * @param {FindManyCourseArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Courses
   * const courses = await prisma.course.findMany()
   * 
   * // Get first 10 Courses
   * const courses = await prisma.course.findMany({ first: 10 })
   * 
   * // Only select the `id`
   * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyCourseArgs>(
    args?: Subset<T, FindManyCourseArgs>
  ): T extends FindManyCourseArgsRequired ? 'Please either choose `select` or `include`' : T extends FindManyCourseSelectArgs
  ? Promise<Array<CourseGetSelectPayload<ExtractFindManyCourseSelectArgs<T>>>> : T extends FindManyCourseIncludeArgs
  ? Promise<Array<CourseGetIncludePayload<ExtractFindManyCourseIncludeArgs<T>>>> : Promise<Array<Course>>
  /**
   * Create a Course.
   * @param {CourseCreateArgs} args - Arguments to create a Course.
   * @example
   * // Create one Course
   * const user = await prisma.course.create({
   *   data: {
   *     // ... data to create a Course
   *   }
   * })
   * 
  **/
  create<T extends CourseCreateArgs>(
    args: Subset<T, CourseCreateArgs>
  ): T extends CourseCreateArgsRequired ? 'Please either choose `select` or `include`' : T extends CourseSelectCreateArgs ? Promise<CourseGetSelectPayload<ExtractCourseSelectCreateArgs<T>>>
  : T extends CourseIncludeCreateArgs ? Promise<CourseGetIncludePayload<ExtractCourseIncludeCreateArgs<T>>> : CourseClient<Course>
  /**
   * Delete a Course.
   * @param {CourseDeleteArgs} args - Arguments to delete one Course.
   * @example
   * // Delete one Course
   * const user = await prisma.course.delete({
   *   where: {
   *     // ... filter to delete one Course
   *   }
   * })
   * 
  **/
  delete<T extends CourseDeleteArgs>(
    args: Subset<T, CourseDeleteArgs>
  ): T extends CourseDeleteArgsRequired ? 'Please either choose `select` or `include`' : T extends CourseSelectDeleteArgs ? Promise<CourseGetSelectPayload<ExtractCourseSelectDeleteArgs<T>>>
  : T extends CourseIncludeDeleteArgs ? Promise<CourseGetIncludePayload<ExtractCourseIncludeDeleteArgs<T>>> : CourseClient<Course>
  /**
   * Update one Course.
   * @param {CourseUpdateArgs} args - Arguments to update one Course.
   * @example
   * // Update one Course
   * const course = await prisma.course.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  update<T extends CourseUpdateArgs>(
    args: Subset<T, CourseUpdateArgs>
  ): T extends CourseUpdateArgsRequired ? 'Please either choose `select` or `include`' : T extends CourseSelectUpdateArgs ? Promise<CourseGetSelectPayload<ExtractCourseSelectUpdateArgs<T>>>
  : T extends CourseIncludeUpdateArgs ? Promise<CourseGetIncludePayload<ExtractCourseIncludeUpdateArgs<T>>> : CourseClient<Course>
  /**
   * Delete zero or more Courses.
   * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
   * @example
   * // Delete a few Courses
   * const { count } = await prisma.course.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends CourseDeleteManyArgs>(
    args: Subset<T, CourseDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Courses.
   * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Courses
   * const course = await prisma.course.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  updateMany<T extends CourseUpdateManyArgs>(
    args: Subset<T, CourseUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Course.
   * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
   * @example
   * // Update or create a Course
   * const course = await prisma.course.upsert({
   *   create: {
   *     // ... data to create a Course
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Course we want to update
   *   }
   * })
  **/
  upsert<T extends CourseUpsertArgs>(
    args: Subset<T, CourseUpsertArgs>
  ): T extends CourseUpsertArgsRequired ? 'Please either choose `select` or `include`' : T extends CourseSelectUpsertArgs ? Promise<CourseGetSelectPayload<ExtractCourseSelectUpsertArgs<T>>>
  : T extends CourseIncludeUpsertArgs ? Promise<CourseGetIncludePayload<ExtractCourseIncludeUpsertArgs<T>>> : CourseClient<Course>
  /**
   * 
   */
  count(): Promise<number>
}

export declare class CourseClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Course findOne
 */
export type FindOneCourseArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * Filter, which Course to fetch.
  **/
  where: CourseWhereUniqueInput
}

export type FindOneCourseArgsRequired = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * Filter, which Course to fetch.
  **/
  where: CourseWhereUniqueInput
}

export type FindOneCourseSelectArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * Filter, which Course to fetch.
  **/
  where: CourseWhereUniqueInput
}

export type FindOneCourseSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * Filter, which Course to fetch.
  **/
  where: CourseWhereUniqueInput
}

export type FindOneCourseIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * Filter, which Course to fetch.
  **/
  where: CourseWhereUniqueInput
}

export type FindOneCourseIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * Filter, which Course to fetch.
  **/
  where: CourseWhereUniqueInput
}

export type ExtractFindOneCourseSelectArgs<S extends undefined | boolean | FindOneCourseSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOneCourseSelectArgs
  ? S['select']
  : true

export type ExtractFindOneCourseIncludeArgs<S extends undefined | boolean | FindOneCourseIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOneCourseIncludeArgs
  ? S['include']
  : true



/**
 * Course findMany
 */
export type FindManyCourseArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * Filter, which Courses to fetch.
  **/
  where?: CourseWhereInput | null
  /**
   * Determine the order of the Courses to fetch.
  **/
  orderBy?: CourseOrderByInput | null
  /**
   * Skip the first `n` Courses.
  **/
  skip?: number | null
  /**
   * Get all Courses that come after the Course you provide with the current order.
  **/
  after?: CourseWhereUniqueInput | null
  /**
   * Get all Courses that come before the Course you provide with the current order.
  **/
  before?: CourseWhereUniqueInput | null
  /**
   * Get the first `n` Courses.
  **/
  first?: number | null
  /**
   * Get the last `n` Courses.
  **/
  last?: number | null
}

export type FindManyCourseArgsRequired = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * Filter, which Courses to fetch.
  **/
  where?: CourseWhereInput | null
  /**
   * Determine the order of the Courses to fetch.
  **/
  orderBy?: CourseOrderByInput | null
  /**
   * Skip the first `n` Courses.
  **/
  skip?: number | null
  /**
   * Get all Courses that come after the Course you provide with the current order.
  **/
  after?: CourseWhereUniqueInput | null
  /**
   * Get all Courses that come before the Course you provide with the current order.
  **/
  before?: CourseWhereUniqueInput | null
  /**
   * Get the first `n` Courses.
  **/
  first?: number | null
  /**
   * Get the last `n` Courses.
  **/
  last?: number | null
}

export type FindManyCourseSelectArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * Filter, which Courses to fetch.
  **/
  where?: CourseWhereInput | null
  /**
   * Determine the order of the Courses to fetch.
  **/
  orderBy?: CourseOrderByInput | null
  /**
   * Skip the first `n` Courses.
  **/
  skip?: number | null
  /**
   * Get all Courses that come after the Course you provide with the current order.
  **/
  after?: CourseWhereUniqueInput | null
  /**
   * Get all Courses that come before the Course you provide with the current order.
  **/
  before?: CourseWhereUniqueInput | null
  /**
   * Get the first `n` Courses.
  **/
  first?: number | null
  /**
   * Get the last `n` Courses.
  **/
  last?: number | null
}

export type FindManyCourseSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * Filter, which Courses to fetch.
  **/
  where?: CourseWhereInput | null
  /**
   * Determine the order of the Courses to fetch.
  **/
  orderBy?: CourseOrderByInput | null
  /**
   * Skip the first `n` Courses.
  **/
  skip?: number | null
  /**
   * Get all Courses that come after the Course you provide with the current order.
  **/
  after?: CourseWhereUniqueInput | null
  /**
   * Get all Courses that come before the Course you provide with the current order.
  **/
  before?: CourseWhereUniqueInput | null
  /**
   * Get the first `n` Courses.
  **/
  first?: number | null
  /**
   * Get the last `n` Courses.
  **/
  last?: number | null
}

export type FindManyCourseIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * Filter, which Courses to fetch.
  **/
  where?: CourseWhereInput | null
  /**
   * Determine the order of the Courses to fetch.
  **/
  orderBy?: CourseOrderByInput | null
  /**
   * Skip the first `n` Courses.
  **/
  skip?: number | null
  /**
   * Get all Courses that come after the Course you provide with the current order.
  **/
  after?: CourseWhereUniqueInput | null
  /**
   * Get all Courses that come before the Course you provide with the current order.
  **/
  before?: CourseWhereUniqueInput | null
  /**
   * Get the first `n` Courses.
  **/
  first?: number | null
  /**
   * Get the last `n` Courses.
  **/
  last?: number | null
}

export type FindManyCourseIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * Filter, which Courses to fetch.
  **/
  where?: CourseWhereInput | null
  /**
   * Determine the order of the Courses to fetch.
  **/
  orderBy?: CourseOrderByInput | null
  /**
   * Skip the first `n` Courses.
  **/
  skip?: number | null
  /**
   * Get all Courses that come after the Course you provide with the current order.
  **/
  after?: CourseWhereUniqueInput | null
  /**
   * Get all Courses that come before the Course you provide with the current order.
  **/
  before?: CourseWhereUniqueInput | null
  /**
   * Get the first `n` Courses.
  **/
  first?: number | null
  /**
   * Get the last `n` Courses.
  **/
  last?: number | null
}

export type ExtractFindManyCourseSelectArgs<S extends undefined | boolean | FindManyCourseSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyCourseSelectArgs
  ? S['select']
  : true

export type ExtractFindManyCourseIncludeArgs<S extends undefined | boolean | FindManyCourseIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyCourseIncludeArgs
  ? S['include']
  : true



/**
 * Course create
 */
export type CourseCreateArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * The data needed to create a Course.
  **/
  data: CourseCreateInput
}

export type CourseCreateArgsRequired = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * The data needed to create a Course.
  **/
  data: CourseCreateInput
}

export type CourseSelectCreateArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * The data needed to create a Course.
  **/
  data: CourseCreateInput
}

export type CourseSelectCreateArgsOptional = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * The data needed to create a Course.
  **/
  data: CourseCreateInput
}

export type CourseIncludeCreateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * The data needed to create a Course.
  **/
  data: CourseCreateInput
}

export type CourseIncludeCreateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * The data needed to create a Course.
  **/
  data: CourseCreateInput
}

export type ExtractCourseSelectCreateArgs<S extends undefined | boolean | CourseSelectCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends CourseSelectCreateArgs
  ? S['select']
  : true

export type ExtractCourseIncludeCreateArgs<S extends undefined | boolean | CourseIncludeCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends CourseIncludeCreateArgs
  ? S['include']
  : true



/**
 * Course update
 */
export type CourseUpdateArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * The data needed to update a Course.
  **/
  data: CourseUpdateInput
  /**
   * Choose, which Course to update.
  **/
  where: CourseWhereUniqueInput
}

export type CourseUpdateArgsRequired = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * The data needed to update a Course.
  **/
  data: CourseUpdateInput
  /**
   * Choose, which Course to update.
  **/
  where: CourseWhereUniqueInput
}

export type CourseSelectUpdateArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * The data needed to update a Course.
  **/
  data: CourseUpdateInput
  /**
   * Choose, which Course to update.
  **/
  where: CourseWhereUniqueInput
}

export type CourseSelectUpdateArgsOptional = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * The data needed to update a Course.
  **/
  data: CourseUpdateInput
  /**
   * Choose, which Course to update.
  **/
  where: CourseWhereUniqueInput
}

export type CourseIncludeUpdateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * The data needed to update a Course.
  **/
  data: CourseUpdateInput
  /**
   * Choose, which Course to update.
  **/
  where: CourseWhereUniqueInput
}

export type CourseIncludeUpdateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * The data needed to update a Course.
  **/
  data: CourseUpdateInput
  /**
   * Choose, which Course to update.
  **/
  where: CourseWhereUniqueInput
}

export type ExtractCourseSelectUpdateArgs<S extends undefined | boolean | CourseSelectUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends CourseSelectUpdateArgs
  ? S['select']
  : true

export type ExtractCourseIncludeUpdateArgs<S extends undefined | boolean | CourseIncludeUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends CourseIncludeUpdateArgs
  ? S['include']
  : true



/**
 * Course updateMany
 */
export type CourseUpdateManyArgs = {
  data: CourseUpdateManyMutationInput
  where?: CourseWhereInput | null
}


/**
 * Course upsert
 */
export type CourseUpsertArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * The filter to search for the Course to update in case it exists.
  **/
  where: CourseWhereUniqueInput
  /**
   * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
  **/
  create: CourseCreateInput
  /**
   * In case the Course was found with the provided `where` argument, update it with this data.
  **/
  update: CourseUpdateInput
}

export type CourseUpsertArgsRequired = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * The filter to search for the Course to update in case it exists.
  **/
  where: CourseWhereUniqueInput
  /**
   * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
  **/
  create: CourseCreateInput
  /**
   * In case the Course was found with the provided `where` argument, update it with this data.
  **/
  update: CourseUpdateInput
}

export type CourseSelectUpsertArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * The filter to search for the Course to update in case it exists.
  **/
  where: CourseWhereUniqueInput
  /**
   * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
  **/
  create: CourseCreateInput
  /**
   * In case the Course was found with the provided `where` argument, update it with this data.
  **/
  update: CourseUpdateInput
}

export type CourseSelectUpsertArgsOptional = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * The filter to search for the Course to update in case it exists.
  **/
  where: CourseWhereUniqueInput
  /**
   * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
  **/
  create: CourseCreateInput
  /**
   * In case the Course was found with the provided `where` argument, update it with this data.
  **/
  update: CourseUpdateInput
}

export type CourseIncludeUpsertArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * The filter to search for the Course to update in case it exists.
  **/
  where: CourseWhereUniqueInput
  /**
   * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
  **/
  create: CourseCreateInput
  /**
   * In case the Course was found with the provided `where` argument, update it with this data.
  **/
  update: CourseUpdateInput
}

export type CourseIncludeUpsertArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * The filter to search for the Course to update in case it exists.
  **/
  where: CourseWhereUniqueInput
  /**
   * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
  **/
  create: CourseCreateInput
  /**
   * In case the Course was found with the provided `where` argument, update it with this data.
  **/
  update: CourseUpdateInput
}

export type ExtractCourseSelectUpsertArgs<S extends undefined | boolean | CourseSelectUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends CourseSelectUpsertArgs
  ? S['select']
  : true

export type ExtractCourseIncludeUpsertArgs<S extends undefined | boolean | CourseIncludeUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends CourseIncludeUpsertArgs
  ? S['include']
  : true



/**
 * Course delete
 */
export type CourseDeleteArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * Filter which Course to delete.
  **/
  where: CourseWhereUniqueInput
}

export type CourseDeleteArgsRequired = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * Filter which Course to delete.
  **/
  where: CourseWhereUniqueInput
}

export type CourseSelectDeleteArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * Filter which Course to delete.
  **/
  where: CourseWhereUniqueInput
}

export type CourseSelectDeleteArgsOptional = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * Filter which Course to delete.
  **/
  where: CourseWhereUniqueInput
}

export type CourseIncludeDeleteArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
  /**
   * Filter which Course to delete.
  **/
  where: CourseWhereUniqueInput
}

export type CourseIncludeDeleteArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
  /**
   * Filter which Course to delete.
  **/
  where: CourseWhereUniqueInput
}

export type ExtractCourseSelectDeleteArgs<S extends undefined | boolean | CourseSelectDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends CourseSelectDeleteArgs
  ? S['select']
  : true

export type ExtractCourseIncludeDeleteArgs<S extends undefined | boolean | CourseIncludeDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends CourseIncludeDeleteArgs
  ? S['include']
  : true



/**
 * Course deleteMany
 */
export type CourseDeleteManyArgs = {
  where?: CourseWhereInput | null
}


/**
 * Course without action
 */
export type CourseArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
}

export type CourseArgsRequired = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
}

export type CourseSelectArgs = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select: CourseSelect
}

export type CourseSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Course
  **/
  select?: CourseSelect | null
}

export type CourseIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: CourseInclude
}

export type CourseIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CourseInclude | null
}

export type ExtractCourseSelectArgs<S extends undefined | boolean | CourseSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends CourseSelectArgs
  ? S['select']
  : true

export type ExtractCourseIncludeArgs<S extends undefined | boolean | CourseIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends CourseIncludeArgs
  ? S['include']
  : true




/**
 * Deep Input Types
 */


export type CourseWhereInput = {
  id?: string | StringFilter | null
  createdAt?: Date | string | DateTimeFilter | null
  updatedAt?: Date | string | DateTimeFilter | null
  name?: string | StringFilter | null
  KD?: string | StringFilter | null
  GamerTag?: string | StringFilter | null
  Platform?: string | StringFilter | null
  AND?: Enumerable<CourseWhereInput> | null
  OR?: Enumerable<CourseWhereInput> | null
  NOT?: Enumerable<CourseWhereInput> | null
}

export type CourseWhereUniqueInput = {
  id?: string | null
}

export type CourseCreateInput = {
  id?: string | null
  createdAt?: Date | string | null
  updatedAt?: Date | string | null
  name: string
  KD: string
  GamerTag: string
  Platform: string
}

export type CourseUpdateInput = {
  id?: string | null
  createdAt?: Date | string | null
  updatedAt?: Date | string | null
  name?: string | null
  KD?: string | null
  GamerTag?: string | null
  Platform?: string | null
}

export type CourseUpdateManyMutationInput = {
  id?: string | null
  createdAt?: Date | string | null
  updatedAt?: Date | string | null
  name?: string | null
  KD?: string | null
  GamerTag?: string | null
  Platform?: string | null
}

export type StringFilter = {
  equals?: string | null
  not?: string | StringFilter | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
}

export type DateTimeFilter = {
  equals?: Date | string | null
  not?: Date | string | DateTimeFilter | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
}

export type CourseOrderByInput = {
  id?: OrderByArg | null
  createdAt?: OrderByArg | null
  updatedAt?: OrderByArg | null
  name?: OrderByArg | null
  KD?: OrderByArg | null
  GamerTag?: OrderByArg | null
  Platform?: OrderByArg | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
